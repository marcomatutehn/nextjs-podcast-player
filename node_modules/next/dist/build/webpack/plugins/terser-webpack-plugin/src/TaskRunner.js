"use strict";exports.__esModule=true;exports.default=void 0;var _path=require("path");var _minify=_interopRequireDefault(require("./minify"));var _util=require("util");var _workerFarm=_interopRequireDefault(require("worker-farm"));var _fs=require("fs");var _serializeJavascript=_interopRequireDefault(require("serialize-javascript"));var _asyncSema=require("async-sema");var _mkdirp=_interopRequireDefault(require("mkdirp"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const worker=require.resolve('./worker');const writeFileP=(0,_util.promisify)(_fs.writeFile);const readFileP=(0,_util.promisify)(_fs.readFile);class TaskRunner{constructor({distDir,cpus,cache}){if(cache){_mkdirp.default.sync(this.cacheDir=(0,_path.join)(distDir,'cache','next-minifier'));}// In some cases cpus() returns undefined
// https://github.com/nodejs/node/issues/19022
this.maxConcurrentWorkers=cpus;this.sema=new _asyncSema.Sema(cpus*3);}run(tasks,callback){/* istanbul ignore if */if(!tasks.length){callback(null,[]);return;}if(this.maxConcurrentWorkers>1){const workerOptions=process.platform==='win32'?{maxConcurrentWorkers:this.maxConcurrentWorkers,maxConcurrentCallsPerWorker:1}:{maxConcurrentWorkers:this.maxConcurrentWorkers};this.workers=(0,_workerFarm.default)(workerOptions,worker);this.boundWorkers=(options,cb)=>{try{this.workers((0,_serializeJavascript.default)(options),cb);}catch(error){// worker-farm can fail with ENOMEM or something else
cb(error);}};}else{this.boundWorkers=(options,cb)=>{try{cb(null,(0,_minify.default)(options));}catch(error){cb(error);}};}let toRun=tasks.length;const results=[];const step=(index,data)=>{this.sema.release();toRun-=1;results[index]=data;if(!toRun){callback(null,results);}};tasks.forEach((task,index)=>{const cachePath=this.cacheDir&&(0,_path.join)(this.cacheDir,task.cacheKey);const enqueue=()=>{this.boundWorkers(task,(error,data)=>{const result=error?{error}:data;const done=()=>step(index,result);if(this.cacheDir&&!result.error){writeFileP(cachePath,JSON.stringify(data),'utf8').then(done).catch(done);}else{done();}});};this.sema.acquire().then(()=>{if(this.cacheDir){readFileP(cachePath,'utf8').then(data=>step(index,JSON.parse(data))).catch(()=>enqueue());}else{enqueue();}});});}exit(){if(this.workers){_workerFarm.default.end(this.workers);}}}exports.default=TaskRunner;